<!--Хедер (+скрипты)-->
<?
$PageTitle="Глава -9. Включение PHP в страницу внутри и из внешних файлов";
function customPageHeader(){?>
    <title>Глава -9. Включение PHP в страницу внутри и из внешних файлов</title>
<?}
include_once $_SERVER['DOCUMENT_ROOT']."/common/header.php";
?>

<h2>Размещение PHP-кода на странице</h2>

<p>Существуют 2 распространенных способа размещения <span class="code">&lt;?php?></span>-тэга:</p>
<ol>
    <li>Помещать в эти теги как можно меньшие фрагменты кода PHP и именно в тех местах, где нужно воспользоваться динамическими сценариями, а весь остальной документ составлять из стандартного кода HTML. (Такой код выполняется быстрее)</li>
    <li>Другие программисты открывают его в начале документа, а закрывают в самом конце и выводят любой код HTML путем непосредственного использования команды PHP. (увеличение скорости настолько мизерное, что оно не может оправдать дополнительные сложности многочисленных вставок PHP в отдельно взятый документ)</li>
</ol>
<p>Несмотря на то что при выборе <span class="code">&lt;?</span> неочевиден вызов PHP-парсера, это вполне приемлемый альтернативный синтаксис, который, как правило, также работает. Но не его использоать не рекомендуется, поскольку он несовместим c XML и в настоящее время его применение не приветствуется (это значит, что его поддержка может быть удалена в будущих версиях).</p>
<p>Если в файле содержится только код PHP, то закрывающий тег <span class="code">?></span> можно опустить. Именно так и нужно делать, чтобы гарантировать отсутствие в файлах PHP лишнего пустого пространства (что имеет особую важность при написании объектно-ориентированного кода).</p>
<p>Существует 4 способа размещения кода PHP на странице:</p>

<ol>
    <li>XML-подобный</li>
<!--    todo tip наиболее предпочтительный метод-->
    <li>SGML-подобный</li>
    <li>Основанный на тегах ASP</li>
    <li>На основе тегов <span class="code">&lt;script></span> HTML</li>
</ol>
<p>Несмотря на то что при выборе <span class="code">&lt;?</span> неочевиден вызов PHP-парсера, это вполне приемлемый альтернативный синтаксис, который, как правило, также работает. Но не его использоать не рекомендуется, поскольку он несовместим c XML и в настоящее время его применение не приветствуется (это значит, что его поддержка может быть удалена в будущих версиях).</p>
<p>Если в файле содержится только код PHP, то закрывающий тег <span class="code">?></span> можно опустить. Именно так и нужно делать, чтобы гарантировать отсутствие в файлах PHP лишнего пустого пространства (что имеет особую важность при написании объектно-ориентированного кода).</p>

<h3>XML-подобный стиль размещения кода PHP на странице</h3>
<!--todo: tip стандартный стиль-->
<p>Из-за широкого распространения языка XML (<i>extensible markup language</i>)
и миграции с HTML на XML (XHTML) в настоящее время предпочтительным
способом встраивания PHP считается использование XML-совместимых тегов
для обозначения инструкций PHP.</p>
<p>Создать теги для обозначения команд PHP на языке XML было несложно,
потому что XML позволяет определять новые теги. Заключите свой код PHP
в теги <span class="code">&lt;?php</span> и <span class="code">?></span>, и все содержимое между ними будет интерпретировано как
PHP, а остальное содержимое — нет. Хотя добавлять пробелы между тегами
и внутренним текстом необязательно, это улучшит удобочитаемость. Например, для вывода сообщения <span class="code">"Hello, world"</span> можно включить в веб-страницу следующую строку:</p>
<pre><code>&lt;?php echo "Hello, world"; ?></code></pre>
<div class="code-example-output-title"><span>Вывод:</span>
    <div class="code-example-output">
<pre>
<?php echo "Hello, world"; ?>
</pre>
    </div>
</div>
<p>Внутри полного файла HTML это выглядит примерно так:</p>
<pre><code>&lt;!doctype html>
&lt;html>
&lt;head>
    &lt;title>This is my first PHP program!&lt;/title>
&lt;/head>
&lt;body>
&lt;p>
    Look, ma! It's my first PHP program:&lt;br />
    &lt;?php echo "Hello, world"; ?>&lt;br />
    How cool is that?
&lt;/p>
&lt;/body>
&lt;/html></code></pre>
<p>Конечно, не впечатляет — то же самое можно сделать и без PHP. Полезность
PHP проявляется при включении в веб-страницу динамической информации,
например, из БД, и значений форм.</p>
<p>Также проследите за переключением между PHP и обычным HTML в границах одной строки. Команды PHP могут размещаться в любом месте файла, даже внутри тегов HTML. Пример:</p>
<pre><code>&lt;input type="text" name="first_name" value="&lt;?php echo "Peter"; ?>" /></code></pre>
<div class="code-example-output-title"><span>Вывод:</span>
    <div class="code-example-output">
<pre>
<input type="text" name="first_name" value="<?php echo "Peter"; ?>" />
</pre>
    </div>
</div>

<h3>SGML-подобный стиль размещения кода PHP на странице</h3>
<p>Другой стиль встраивания PHP основан на тегах обработки инструкций SGML.
Заключите наш пример PHP между тегами <span class="code">&lt;?</span> и <span class="code">?></span>:</p>
<pre><code>&lt;? echo "Hello, world"; ?></code></pre>
<div class="code-example-output-title"><span>Вывод:</span>
    <div class="code-example-output">
<pre>
<? echo "Hello, world"; ?>
</pre>
    </div>
</div>
<p>Этот стиль (так называемые короткие теги) по умолчанию отключен. Вы можете
включить поддержку коротких тегов, построив PHP с ключом <span class="code">--enable-short-tags</span>, или включить параметр short_open_tag в файле конфигурации PHP (не
рекомендуется, потому что работоспособность кода при его экспорте на другую
платформу будет зависеть от состояния этой настройки).
Короткий тег эхо-вывода <span class="code">&lt;?= ... ?></span> доступен независимо от доступности других коротких тегов.</p>

<h3>Прямой эхо-вывод содержимого</h3>
<p>Пожалуй, самой распространенной операцией в приложениях PHP является
вывод данных для пользователя. В контексте веб-приложения это означает
вставку в HTML-документ информации, которая будет преобразована в HTML
при ее просмотре пользователем.</p>
<p>Для упрощения этой операции PHP предоставляет специальную версию тегов SGML, которая автоматически получает значение в теге и вставляет его
в страницу HTML. Чтобы воспользоваться этой возможностью, добавьте знак
равенства (<span class="code">=</span>) в открывающий тег:</p>
<pre><code>&lt;input type="text" name="имя" value="&lt;?= "Don"; ?>"></code></pre>
<div class="code-example-output-title"><span>Вывод:</span>
    <div class="code-example-output">
<pre>
<input type="text" name="имя" value="<?= "Don"; ?>">
</pre>
    </div>
</div>

<h2>Включение внешнего кода</h2>
<p>PHP поддерживает две конструкции для загрузки кода и HTML из другого модуля: <span class="code">require</span> и <span class="code">include</span>. Они загружают файл в процессе выполнения скрипта PHP, работают в условных командах и циклах и сигнализируют, если файл не удается найти. Для поиска файлов используется либо путь, указанный как часть указателя, либо значение параметра <span class="code">include_path</span> в файлах <span class="code">php.ini</span>. Параметр <span class="code">include_path</span> может быть переопределен функцией <span class="code">set_include_path()</span>. Если файл не найден, PHP ищет файл в каталоге вызывающего скрипта. Попытка выполнения <span class="code">require</span> с несуществующим файлом приводит к неисправимой ошибке, тогда как <span class="code">include</span> выдает предупреждение, не останавливая выполнение скрипта.</p>
<p>Использование команды include равносильно вставки включаемого файла в данное место текущего файла.</p>
<p>Команда <span class="code">include</span> чаще всего используется для отделения контента, специфического для страницы, от общих элементов дизайна сайта. Общие элементы (такие, как заголовки и завершители) хранятся в отдельных файлах HTML, а каждая страница выглядит примерно так:</p>
<pre><code>&lt;?php include "header.html"; ?>
основной контент
&lt;?php include "footer.html"; ?></code></pre>
<p>Мы используем <span class="code">include</span>, потому что эта команда позволяет PHP продолжить обработку страницы, даже если в файле (файлах) дизайна сайта присутствует ошибка. Конструкция <span class="code">require</span> больше подходит для работы с библиотекой, страница которой в случае неудачной загрузки просто не отображается. Пример:</p>
<pre><code>&lt;?php
require "codelib.php";
mysub(); // определяется в codelib.php
?></code></pre>
<p>Существует другой, чуть более эффективный способ реализации заголовков
    и завершителей, в котором сначала загружаются одиночные файлы, после чего
    вызываются функции, генерирующие стандартизированные элементы сайта:</p>
<pre><code>&lt;?php require "design.php";
header(); ?>
content
&lt;?php footer();</code></pre>
<p>Если PHP не может разобрать какую-либо часть файла, добавленного <span class="code">include</span> или <span class="code">require</span>, выводится предупреждение и выполнение продолжается. Чтобы не получать предупреждение, поставьте перед вызовом оператор <span class="code">@</span> — например,
    <span class="code">@include</span>.</p>
<p>Если в файле конфигурации PHP <span class="code">php.ini</span> включен параметр <span class="code">allow_url_fopen</span>, вы сможете добавлять файлы с удаленного сайта, указывая URL-адрес вместо обычного локального пути:</p>
<pre><code>&lt;?php
include "http://www.example.com/codelib.php";
?></code></pre>
<p>Если программа использует <span class="code">include</span> или <span class="code">require</span> для повторного включения файла (например, ошибочно в цикле), файл будет загружен, а хранящийся в нем код выполнен или разметка HTML будет выведена дважды. Это может привести к ошибкам при переопределении функций или отправке нескольких копий заголовков или разметки HTML. Для предотвращения подобных ошибок используются конструкции <span class="code">include_once</span> и <span class="code">require_once</span>, позволяющие загружать конкретный файл только один раз. Это полезно, например, для добавления элементов страницы, хранящихся в отдельных файлах. Библиотеки элементов должны загружать пользовательские настройки командой <span class="code">require_once</span>, чтобы создатель страницы включал элементы, не проверяя, был ли код пользовательских настроек уже загружен ранее.</p>
<p>Код включенного файла импортируется с областью видимости, действующей
    на момент обнаружения команды <span class="code">include</span>, поэтому включенный код может увидеть и изменить переменные исходного кода. Данная возможность позволяет, например, библиотеке отслеживания пользователей сохранить имя текущего пользователя в глобальной переменной <span class="code">$user</span>:
</p>
<pre><code>&lt;?php
// главная страница
include "userprefs.php";
echo "Hello, {$user}.";
?></code></pre>
<p>Тот факт, что библиотеки смогут видеть и изменять ваши переменные, также
    может создать проблемы. Вы должны знать все глобальные переменные, используемые библиотекой, чтобы случайно не использовать их для собственных
    целей и не вмешаться в работу библиотеки.</p>
<p>Если конструкция include или require находится в функции, переменные во
    включенном файле становятся переменными, обладающими областью видимости этой функции.</p>
<p>Функция <span class="code">get_included_files()</span> возвращает массив с полными системными
    именами всех файлов, включенных в скрипт посредством <span class="code">include</span> или <span class="code">require</span>.
    Файлы, при разборе которых произошла ошибка, в массив не включаются.</p>


<h2>Каталоги сайта</h2>
<ul>
    <li><span class="code">/</span> - корневой (root), или домашний (home), каталог. Обычно это место, на которую ссылается домашняя страница.</li>
    <li><span class="code">css/</span> - каталог со стилями сайта.</li>
    <li><span class="code">js/</span> - каталог с js-скриптами.</li>
    <li><span class="code">php/</span> или <span class="code">scripts/</span> - каталог с php-скриптами. Применение <span class="code">scripts/</span> является правилом хорошего тона среди разработчиков.</li>
    <li><span class="code">page/</span></li>
</ul>



<!--Футер (+скрипты)-->
<?php
include_once $_SERVER['DOCUMENT_ROOT']."/common/footer.php";
?>
